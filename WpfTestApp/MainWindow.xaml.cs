using System;
using System.Windows;
using System.Windows.Input;
using System.Windows.Navigation;
using AppShared.Types ;
using Common.Controls ;
using NLog ;

namespace WpfTestApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // ReSharper disable once InconsistentNaming
        // ReSharper disable once FieldCanBeMadeReadOnly.Local
        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private static Logger Logger = LogManager.GetCurrentClassLogger ( ) ;
        /// <summary>Initializes a new instance of the <see cref="MainWindow"/> class.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public MainWindow ()
        {
            InitializeComponent ( );

            SetValue (
                      AppShared.App.LifetimeScopeProperty
                    , ( Application.Current as App )?.LifetimeScope
                     ) ;
            try
            {
                if ( TryFindResource ( "ResolveServices" ) is ResolveServiceList resolveServiceList )
                {
                    foreach ( var resolveService in resolveServiceList )
                    {
                        var valueSource = DependencyPropertyHelper.GetValueSource (
                                                                                   resolveService
                                                                                 , AppShared
                                                                                  .App
                                                                                  .LifetimeScopeProperty
                                                                                  ) ;
                        var lifetimeScope = AppShared.App.GetLifetimeScope ( resolveService ) ;
                        Logger.Warn (
                                     $"{resolveService.ServiceType} {lifetimeScope} {valueSource}"
                                    ) ;
                    }
                }
            }
            catch ( Exception )
            {
                // ignored
            }
        }


        /// <summary>Gets the type frame.</summary>
        /// <value>The type frame.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TypeFrame
        // ReSharper disable once UnusedMember.Global
        public object TypeFrame => frame ;

        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private void Frame_OnNavigationFailed ( object sender , NavigationFailedEventArgs e )
        {
            var msg = $"{e.Exception.Message}; {e.ExtraData}" ;
            Logger.Error ( $"Nav failed: {msg}" ) ;
        }

        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private void Frame_OnNavigating ( object sender , NavigatingCancelEventArgs e )
        {
            Logger.Error ( e.ContentStateToSave ) ;
        }

        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private void VisitType ( object sender , ExecutedRoutedEventArgs e )
        {
            var eParameter = e.Parameter as Type ;
            if ( eParameter != null )
            {
                var typeControl2 = new TypeControl2() ;
                typeControl2.SetValue(AppShared.App.RenderedTypeProperty, eParameter);
                frame.Navigate(typeControl2) ;
            }
        }
    }
}
