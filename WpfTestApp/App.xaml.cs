using System.Collections.Generic ;
using System.Diagnostics ;
using System.Linq ;
using System.Windows ;
using AppShared.Interfaces ;
using Autofac ;
using Common.Tracing ;
using Common.Utils ;
using NLog ;

namespace WpfTestApp
{
	/// <summary>
	///     Interaction logic for App.xaml
	/// </summary>
	public partial class App : Application , IHaveLifetimeScope
	{
        // ReSharper disable once UnusedMember.Local
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ;

		/// <summary>Gets a value indicating whether [do tracing].</summary>
		/// <value>
		///   <c>true</c> if [do tracing]; otherwise, <c>false</c>.</value>
		/// <autogeneratedoc />
		/// TODO Edit XML Comment Template for DoTracing
		public bool DoTracing => false ;

		/// <summary>Gets or sets the lifetime scope.</summary>
		/// <value>The lifetime scope.</value>
		/// <autogeneratedoc />
		/// TODO Edit XML Comment Template for LifetimeScope
		public ILifetimeScope LifetimeScope { get ; set ; }


        /// <summary>Raises the <see cref="E:System.Windows.Application.Startup" /> event.</summary>
		/// <param name="e">
		///     A <see cref="T:System.Windows.StartupEventArgs" /> that
		///     contains the event data.
		/// </param>
		protected override void OnStartup ( StartupEventArgs e )
		{
			Initialize ( ) ;
			if(e.Args.Any())
            {

            }
			base.OnStartup ( e ) ;
		}

        private void Initialize ( )
		{
            LifetimeScope = ContainerHelper.SetupContainer ( out _ ) ;
			if ( DoTracing )
			{
				InitializeTracing ( ) ;
			}
		}

		private void InitializeTracing ( )
		{
			PresentationTraceSources.Refresh ( ) ;
			var nLogTraceListener = new NLogTraceListener ( ) ;
            var sources = new List < TraceSource >
                          {
                              PresentationTraceSources.ResourceDictionarySource
                            , PresentationTraceSources.DependencyPropertySource
                            , PresentationTraceSources.NameScopeSource
                            , PresentationTraceSources.MarkupSource
                            , PresentationTraceSources.DataBindingSource
                            , PresentationTraceSources.DependencyPropertySource
                          } ;


            nLogTraceListener.DefaultLogLevel = LogLevel.Debug ;
			// nLogTraceListener.ForceLogLevel = LogLevel.Trace ;
			//nLogTraceListener.LogFactory      = AppContainer.Resolve < LogFactory > ( ) ;
			nLogTraceListener.AutoLoggerName = false ;
			//nLogTraceListener.
			sources.ForEach (
			                 traceSource => {
				                 traceSource.Switch.Level = SourceLevels.All ;
				                 traceSource.Listeners.Add ( nLogTraceListener ) ;
				                 traceSource.Listeners.Add ( new AppTraceListener2 ( ) ) ;
			                 }
			                ) ;
		}
    }
}