#region header
// Kay McCormick (mccor)
// 
// FileFinder3
// WpfApp1
// MenuModule.cs
// 
// 2020-01-25-2:03 PM
// 
// ---
#endregion
using System.Collections.Generic ;
using System.Linq ;
using System.Reflection ;
using AppShared.Interfaces ;
using Autofac ;
using Autofac.Builder ;
using Autofac.Extras.DynamicProxy ;
using Common.Logging ;
using Common.Model ;
using Common.Utils ;
using Module = Autofac.Module ;

namespace Common.Menus
{
    /// <summary>Autofac module supporting menu system.</summary>
    /// <seealso cref="Autofac.Module" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for MenuModule
    public class MenuModule : Module
    {
        /// <summary>Override to add registrations to the container.</summary>
        /// <remarks>
        /// Note that the ContainerBuilder parameter is unique to this module.
        /// </remarks>
        /// <param name="builder">The builder through which components can be
        /// registered.</param>
        protected override void Load ( ContainerBuilder builder )
        {
            bool intercept = ( bool ) builder.Properties[ ContainerHelper.InterceptProperty ] ;
            var ass =
                builder.Properties[ ContainerHelper.AssembliesForScanningProperty ] as
                    ICollection<Assembly > ;
            builder.RegisterAssemblyTypes ( ass.ToArray())
                   .Where ( predicate : t => typeof ( ITopLevelMenu ).IsAssignableFrom ( c : t ) )
        
                   .As < ITopLevelMenu > ( ) ;
            #region Menu Item Lists
            
            
            var q = builder.RegisterType < MenuItemList > ( )
                   //.AsImplementedInterfaces ( )
                   .WithMetadata < 
                        ResourceMetadata
                    > ( configurationAction : m => m.For ( propertyAccessor : rn => rn.ResourceName , value : "MenuItemList" ) )
                   .PreserveExistingDefaults ( )
                  .As<IMenuItemList>();
            if(intercept)
                q.EnableInterfaceInterceptors ( )
                   .InterceptedBy ( typeof ( LoggingInterceptor ) ) ;
            var y = builder.RegisterType < XMenuItem > ( )
                   .As<IMenuItem> (  )
			       .AsImplementedInterfaces ( )
                   .PreserveExistingDefaults ( );
                if(intercept)
                    y
                   .EnableInterfaceInterceptors ( )
                   .InterceptedBy ( typeof ( LoggingInterceptor ) ) ;
            #endregion

        }
    }
}