using System ;
using System.Collections.Generic ;
using Autofac.Builder ;
using Autofac.Core ;
using Autofac.Core.Registration ;
using Castle.DynamicProxy ;
using NLog ;

namespace Common
{
    /// <summary></summary>
    /// <seealso cref="Castle.DynamicProxy.IInterceptor" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for BuilderInterceptor
    public class BuilderInterceptor : IInterceptor
    {
        /// <summary>The logger</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Logger
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ;

        /// <summary>Initializes a new instance of the <see cref="BuilderInterceptor"/> class.</summary>
        /// <param name="proxyGenerator">The proxy generator.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public BuilderInterceptor ( ProxyGenerator proxyGenerator )
        {
            ProxyGenerator = proxyGenerator ;
        }

        public ProxyGenerator ProxyGenerator { get ; }

        public List < MethodInvocation > Invocations { get ; } = new List < MethodInvocation > ( ) ;

        public void Intercept ( IInvocation invocation )
        {
            var i = new MethodInvocation ( invocation.Method , invocation.Arguments ) ;
            Invocations.Add ( i ) ;
            invocation.Proceed ( ) ;
            i.OriginalReturnValue = invocation.ReturnValue ;
            try
            {
                if ( i.OriginalReturnValue is DeferredCallback cb )
                {
                    var cbAction = cb.Callback ;
                    var ret = CreateCallbackProxy ( ProxyGenerator , cbAction , cb ) ;
                    invocation.ReturnValue = ret ;
                    i.ReturnValue          = ret ;
                    return ;
                }

                var classProxyWithTarget =
                    ProxyGenerator.CreateClassProxyWithTarget (
                                                               invocation.ReturnValue
                                                             , new BuilderInterceptor (
                                                                                       ProxyGenerator
                                                                                      )
                                                              ) ;
                invocation.ReturnValue = classProxyWithTarget ;
            }
            catch ( Exception ex )
            {
                Logger.Warn ( ex , ex.Message ) ;
            }
        }

        /// <summary>Creates the callback proxy.</summary>
        /// <param name="proxyGenerator">The proxy generator.</param>
        /// <param name="callback">The callback.</param>
        /// <param name="defer">The defer.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateCallbackProxy
        public static object CreateCallbackProxy (
            ProxyGenerator                proxyGenerator
          , Action < IComponentRegistryBuilder > callback
           ,
            // ReSharper disable once UnusedParameter.Global
            DeferredCallback defer
        )

        {
            var x = proxyGenerator.CreateClassProxy (
                                                     typeof ( DeferredCallback )
                                                   , new object[] { callback }
                                                   , new BuilderInterceptor ( proxyGenerator )
                                                    ) ;
            return x ;
        }
    }
}