using AppShared ;
using AppShared.Infos ;
using Common.Context ;
using Common.Logging ;
using Logging ;
using NLog ;
using NLog.Fluent ;
using Xunit ;

namespace AppSharedTests
{
    /// <summary>
    ///     <para>Random test class</para>
    ///     <para></para>
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for TestClass1
    public class TestClass1
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="T:System.Object" />
        ///     class.
        /// </summary>
        public TestClass1 ( )
        {
            // InstanceFactory = null ;
            // Stack           = InstanceFactory.CreateContextStack < InfoContext > ( ) ;
        }

#pragma warning disable 1591
        protected ContextStack < InfoContext > Stack { get ; }
#pragma warning restore 1591

#pragma warning disable 1591
        protected InfoContext.Factory InstanceFactory { get ; }
#pragma warning restore 1591

        // ReSharper disable once UnusedMember.Local
        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private void DoLog ( string test )
        {
            LB ( ).Level ( LogLevel.Trace ).Message ( test ).Write ( ) ;
        }

        // ReSharper disable once InconsistentNaming
        /// <summary>
        ///     working on log builder
        /// </summary>
        /// <returns></returns>
        protected LogBuilder LB ( )
        {
            return new LogBuilder ( LogManager.GetCurrentClassLogger ( ) ).Property (
                                                                                     "stack"
                                                                                   , Stack
                                                                                    ) ;
        }

        /// <summary>
        ///     test push context
        /// </summary>
        [ Fact ]
        [ PushContext ( "test1" ) ]
        public void Test1 ( )
        {
            AppLoggingConfigHelper.EnsureLoggingConfigured ( ) ;

            //AppLoggingConfigHelper.EnsureLoggingConfigured();
            LB ( ).Level ( LogLevel.Warn ).Message ( "Test log output message." ).Write ( ) ;
        }
    }
}